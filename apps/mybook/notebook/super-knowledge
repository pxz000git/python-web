===============高级知识点================================高级知识点===================
###高级知识点包括
    静态文件处理
    中间件
    上传图片
    Admin站点
    分页
    使用jquery完成ajax
================管理静态文件=============================管理静态文件=================================
##管理静态文件
    管理静态文件
        项目中的CSS、图片、js都是静态文件
    配置静态文件
        在settings 文件中定义静态内容
            STATIC_URL = '/static/'
            STATICFILES_DIRS = [
                os.path.join(BASE_DIR, 'static'),
            ]
        在项目根目录下创建static目录，再创建当前应用名称的目录
            mysite/static/myapp/
        在模板中可以使用硬编码
            /static/my_app/myexample.jpg
        在模板中可以使用static编码
            { % load static from staticfiles %}
            <img src="{ % static "my_app/myexample.jpg" %}" alt="My image"/>
===================中间件============================中间件================================
##中间件
    中间件
        是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入或输出
        激活：添加到Django配置文件中的MIDDLEWARE_CLASSES元组中
        每个中间件组件是一个独立的Python类，可以定义下面方法中的一个或多个
            _init _：无需任何参数，服务器响应第一个请求的时候调用一次，用于确定是否启用当前中间件
            process_request(request)：执行视图之前被调用，在每个请求上调用，返回None或HttpResponse对象
            process_view(request, view_func, view_args, view_kwargs)：调用视图之前被调用，在每个请求上调用，返回None或HttpResponse对象
            process_template_response(request, response)：在视图刚好执行完毕之后被调用，在每个请求上调用，返回实现了render方法的响应对象
            process_response(request, response)：所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象
            process_exception(request,response,exception)：当视图抛出异常时调用，在每个请求上调用，返回一个HttpResponse对象
        使用中间件，可以干扰整个处理过程，每次请求中都会执行中间件的这个方法
        示例：自定义异常处理
            与settings.py同级目录下创建myexception.py文件，定义类MyException，实现process_exception方法
            from django.http import HttpResponse
            class MyException():
                def process_exception(request,response, exception):
                    return HttpResponse(exception.message)
        将类MyException注册到settings.py中间件中
            MIDDLEWARE_CLASSES = (
                'test1.myexception.MyException',
                ...
            )
        定义视图，并发生一个异常信息，则会运行自定义的异常处理
===============上传图片===========================上传图片==========================
##上传图片
    上传图片
        当Django在处理文件上传的时候，文件数据被保存在request.FILES
        FILES中的每个键为<input type="file" name="" />中的name
        注意：FILES只有在请求的方法为POST 且提交的<form>带有enctype="multipart/form-data" 的情况下才会包含数据。否则，FILES 将为一个空的类似于字典的对象
        使用模型处理上传文件：将属性定义成models.ImageField类型
            pic=models.ImageField(upload_to='cars/')
        注意：如果属性类型为ImageField需要安装包Pilow
            pip install Pillow==3.4.1
        图片存储路径
            在项目根目录下创建media文件夹
            图片上传后，会被保存到“/static/media/cars/图片文件”
            打开settings.py文件，增加media_root项
            MEDIA_ROOT=os.path.join(BASE_DIR,"static/media")
        使用django后台管理，遇到ImageField类型的属性会出现一个file框，完成文件上传
        手动上传的模板代码
            <html>
            <head>
                <title>文件上传</title>
            </head>
            <body>
                <form method="post" action="upload/" enctype="multipart/form-data">
                    <input type="text" name="title"><br>
                    <input type="file" name="pic"/><br>
                    <input type="submit" value="上传">
                </form>
            </body>
            </html>
        手动上传的视图代码
            from django.conf import settings

            def upload(request):
                if request.method == "POST":
                    f1 = request.FILES['pic']
                    fname = '%s/cars/%s' % (settings.MEDIA_ROOT,f1.name)
                    with open(fname, 'w') as pic:
                        for c in f1.chunks():
                            pic.write(c)
                    return HttpResponse("ok")
                else:
                    return HttpResponse("error")
